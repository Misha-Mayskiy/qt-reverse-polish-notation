from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                               QHBoxLayout, QLineEdit, QPushButton, QLabel,
                               QTextEdit, QListWidget, QGridLayout, QGroupBox,
                               QSplitter, QMessageBox, QListWidgetItem, QStatusBar,
                               QMenuBar, QMenu, QGraphicsDropShadowEffect, QCompleter)
from PySide6.QtCore import Qt, QPropertyAnimation, QEasingCurve, Signal, QRect, QTimer, QStringListModel
from PySide6.QtGui import QFont, QFontDatabase, QPalette, QColor, QKeySequence, QShortcut, QAction
import sys
from rpn_calculator.parser import parse_str_infix, is_infix, parse_str_postfix
from rpn_calculator.calculator import rpn_calculator


class AnimatedButton(QPushButton):
    """–ö–Ω–æ–ø–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π"""

    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.default_style = ""
        self.hover_style = ""
        self._animation_timer = QTimer()
        self._animation_timer.timeout.connect(self._animate_pulse)
        self.pulse_count = 0

        # –≠—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏
        self.shadow = QGraphicsDropShadowEffect()
        self.shadow.setBlurRadius(10)
        self.shadow.setColor(QColor(0, 0, 0, 80))
        self.shadow.setOffset(0, 2)
        self.setGraphicsEffect(self.shadow)

    def enterEvent(self, event):
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–Ω—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        self.shadow.setBlurRadius(15)
        self.shadow.setOffset(0, 4)
        super().enterEvent(event)

    def leaveEvent(self, event):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–Ω—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        self.shadow.setBlurRadius(10)
        self.shadow.setOffset(0, 2)
        super().leaveEvent(event)

    def mousePressEvent(self, event):
        # –£–±–∏—Ä–∞–µ–º —Ç–µ–Ω—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        self.shadow.setBlurRadius(5)
        self.shadow.setOffset(0, 1)
        super().mousePressEvent(event)

    def mouseReleaseEvent(self, event):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–Ω—å –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
        self.shadow.setBlurRadius(10)
        self.shadow.setOffset(0, 2)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
        self.pulse_count = 0
        self._animation_timer.start(50)
        super().mouseReleaseEvent(event)

    def _animate_pulse(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞"""
        self.pulse_count += 1
        if self.pulse_count > 10:
            self._animation_timer.stop()
            self.shadow.setColor(QColor(0, 0, 0, 80))
            return

        # –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–Ω–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—É–ª—å—Å–∞—Ü–∏–∏
        alpha = 80 + (20 * (1 - self.pulse_count / 10))
        self.shadow.setColor(QColor(100, 200, 255, int(alpha)))


class CalculatorGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.env = {}
        self.history = []
        self.last_result = None
        self.history_visible = True
        self.init_ui()
        self.apply_styles()
        self.create_menu_bar()
        self.create_status_bar()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("Modern RPN/Infix Calculator")
        self.setGeometry(100, 100, 900, 700)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QHBoxLayout(central_widget)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(15, 15, 15, 15)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
        left_panel = self.create_calculator_panel()

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        self.right_panel = self.create_info_panel()

        # Splitter –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–∞–Ω–µ–ª–µ–π
        self.splitter = QSplitter(Qt.Horizontal)
        self.splitter.addWidget(left_panel)
        self.splitter.addWidget(self.right_panel)
        self.splitter.setStretchFactor(0, 2)
        self.splitter.setStretchFactor(1, 1)

        main_layout.addWidget(self.splitter)

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_shortcuts()

    def create_menu_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é"""
        menubar = self.menuBar()

        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = menubar.addMenu("–§–∞–π–ª")

        clear_action = QAction("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", self)
        clear_action.setShortcut("Ctrl+Shift+C")
        clear_action.triggered.connect(self.clear_all)
        file_menu.addAction(clear_action)

        file_menu.addSeparator()

        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # –ú–µ–Ω—é –ü—Ä–∞–≤–∫–∞
        edit_menu = menubar.addMenu("–ü—Ä–∞–≤–∫–∞")

        copy_result_action = QAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", self)
        copy_result_action.setShortcut("Ctrl+R")
        copy_result_action.triggered.connect(self.copy_result)
        edit_menu.addAction(copy_result_action)

        # –ú–µ–Ω—é –í–∏–¥
        view_menu = menubar.addMenu("–í–∏–¥")

        self.toggle_history_action = QAction("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é", self)
        self.toggle_history_action.setShortcut("Ctrl+H")
        self.toggle_history_action.triggered.connect(self.toggle_history)
        view_menu.addAction(self.toggle_history_action)

    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º")

    def create_calculator_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        layout.setSpacing(15)

        # –î–∏—Å–ø–ª–µ–π
        display_group = QGroupBox("–í–´–ß–ò–°–õ–ï–ù–ò–Ø")
        display_layout = QVBoxLayout()
        display_layout.setSpacing(10)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        self.input_field = QLineEdit()
        self.input_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ...")
        self.input_field.setFont(QFont("Consolas", 14))
        self.input_field.returnPressed.connect(self.calculate)
        self.input_field.textChanged.connect(self.on_input_changed)

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.completer = QCompleter()
        self.input_field.setCompleter(self.completer)

        display_layout.addWidget(self.input_field)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª—è—Ç—å –∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)
        self.result_label = QLineEdit("= 0")
        self.result_label.setReadOnly(True)
        self.result_label.setFont(QFont("Consolas", 18, QFont.Bold))
        self.result_label.setAlignment(Qt.AlignRight)
        self.result_label.setMinimumHeight(50)
        self.result_label.setContextMenuPolicy(Qt.DefaultContextMenu)  # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        display_layout.addWidget(self.result_label)

        display_group.setLayout(display_layout)
        layout.addWidget(display_group)

        # –ö–Ω–æ–ø–∫–∏
        buttons_group = QGroupBox("–ö–õ–ê–í–ò–ê–¢–£–†–ê")
        buttons_layout = QGridLayout()
        buttons_layout.setSpacing(8)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏
        buttons = [
            # –†—è–¥ 0
            [('C', 'clear', 'üóëÔ∏è'), ('(', 'operator', None), (')', 'operator', None), ('‚å´', 'clear', None)],
            # –†—è–¥ 1
            [('sin', 'function', None), ('cos', 'function', None), ('tan', 'function', None),
             ('sqrt', 'function', '‚àö')],
            # –†—è–¥ 2
            [('7', 'number', None), ('8', 'number', None), ('9', 'number', None), ('/', 'operator', '√∑')],
            # –†—è–¥ 3
            [('4', 'number', None), ('5', 'number', None), ('6', 'number', None), ('*', 'operator', '√ó')],
            # –†—è–¥ 4
            [('1', 'number', None), ('2', 'number', None), ('3', 'number', None), ('-', 'operator', None)],
            # –†—è–¥ 5
            [('0', 'number', None), ('.', 'number', None), ('^', 'operator', None), ('+', 'operator', None)],
            # –†—è–¥ 6
            [('log', 'function', None), ('ln', 'function', None), ('œÄ', 'constant', None), ('=', 'equals', None)]
        ]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        for row_idx, row in enumerate(buttons):
            for col_idx, btn_data in enumerate(row):
                text, btn_type = btn_data[0], btn_data[1]
                icon = btn_data[2] if len(btn_data) > 2 else None

                btn = AnimatedButton(icon if icon else text)
                btn.setMinimumHeight(50)
                btn.setFont(QFont("Arial", 14, QFont.Bold))
                btn.clicked.connect(lambda checked, t=text: self.button_click(t))

                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                btn.setProperty("button_type", btn_type)

                # –î–æ–±–∞–≤–ª—è–µ–º tooltip
                if text in ['sin', 'cos', 'tan']:
                    btn.setToolTip(f"–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è {text}")
                elif text == 'sqrt':
                    btn.setToolTip("–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å")
                elif text == 'log':
                    btn.setToolTip("–õ–æ–≥–∞—Ä–∏—Ñ–º –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é 10")
                elif text == 'ln':
                    btn.setToolTip("–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º")
                elif text == 'œÄ':
                    btn.setToolTip("–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ œÄ (3.14159...)")

                buttons_layout.addWidget(btn, row_idx, col_idx)

        buttons_group.setLayout(buttons_layout)
        layout.addWidget(buttons_group)

        return panel

    def create_info_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        layout.setSpacing(15)

        # –ò—Å—Ç–æ—Ä–∏—è
        self.history_group = QGroupBox("–ò–°–¢–û–†–ò–Ø –í–´–ß–ò–°–õ–ï–ù–ò–ô")
        history_layout = QVBoxLayout()

        self.history_list = QListWidget()
        self.history_list.setFont(QFont("Consolas", 11))
        self.history_list.itemDoubleClicked.connect(self.use_history_item)
        history_layout.addWidget(self.history_list)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        clear_history_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        clear_history_btn.clicked.connect(self.clear_history)
        history_layout.addWidget(clear_history_btn)

        self.history_group.setLayout(history_layout)
        layout.addWidget(self.history_group, 2)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        vars_group = QGroupBox("–ü–ï–†–ï–ú–ï–ù–ù–´–ï")
        vars_layout = QVBoxLayout()

        self.vars_text = QTextEdit()
        self.vars_text.setFont(QFont("Consolas", 11))
        self.vars_text.setReadOnly(True)
        self.vars_text.setMaximumHeight(200)
        vars_layout.addWidget(self.vars_text)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        clear_vars_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        clear_vars_btn.clicked.connect(self.clear_variables)
        vars_layout.addWidget(clear_vars_btn)

        vars_group.setLayout(vars_layout)
        layout.addWidget(vars_group, 1)

        return panel

    def setup_shortcuts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # Ctrl+H - –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        QShortcut(QKeySequence("Ctrl+H"), self, self.toggle_history)
        # Ctrl+L - –æ—á–∏—Å—Ç–∏—Ç—å
        QShortcut(QKeySequence("Ctrl+L"), self, self.clear_input)
        # Escape - –æ—á–∏—Å—Ç–∏—Ç—å
        QShortcut(QKeySequence("Escape"), self, self.clear_input)

    def on_input_changed(self, text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        var_list = list(self.env.keys())
        self.completer.setModel(QStringListModel(var_list))

    def button_click(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
        current = self.input_field.text()

        if text == 'C' or text == 'üóëÔ∏è':
            self.clear_input()
        elif text == '‚å´':
            self.input_field.setText(current[:-1])
        elif text == '=':
            self.calculate()
        elif text == 'œÄ':
            if current and not current.endswith(' '):
                self.input_field.insert(' pi')
            else:
                self.input_field.insert('pi')
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            if text in ['+', '-', '*', '/', '^']:
                if current and current[-1] != ' ':
                    self.input_field.insert(f' {text} ')
                else:
                    self.input_field.insert(f'{text} ')
            elif text in ['sin', 'cos', 'tan', 'sqrt', 'log', 'ln']:
                self.input_field.insert(f'{text}(')
            else:
                self.input_field.insert(text)

        self.input_field.setFocus()

    def calculate(self):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        expression = self.input_field.text().strip()
        if not expression:
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
            var_name = None
            if '=' in expression:
                parts = expression.split('=', 1)
                var_name = parts[0].strip()
                expression = parts[1].strip()
                if not var_name.isidentifier():
                    raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {var_name}")

            # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
            rpn_expr = parse_str_infix(expression) if is_infix(expression) else parse_str_postfix(expression)
            result = rpn_calculator(rpn_expr, self.env)
            self.last_result = result

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if var_name:
                self.env[var_name] = result
                self.result_label.setText(f"{var_name} = {result}")
                self.add_to_history(f"{var_name} = {expression} = {result}")
                self.update_variables_display()
            else:
                self.result_label.setText(f"= {result}")
                self.add_to_history(f"{expression} = {result}")

            # –ê–Ω–∏–º–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.animate_result(success=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_bar.showMessage("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", 3000)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))
            self.result_label.setText("–û—à–∏–±–∫–∞!")
            self.animate_result(success=False)
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞: {str(e)}", 5000)

    def add_to_history(self, item):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        list_item = QListWidgetItem(item)
        self.history_list.insertItem(0, list_item)
        self.history.insert(0, item)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        while self.history_list.count() > 100:
            self.history_list.takeItem(100)
            self.history.pop()

    def use_history_item(self, item):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        text = item.text()
        if '=' in text:
            # –ë–µ—Ä–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
            expr = text.split('=')[0].strip()
            self.input_field.setText(expr)
            self.input_field.setFocus()

    def update_variables_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        if not self.env:
            self.vars_text.setText("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        else:
            vars_text = "\n".join([f"{k} = {v}" for k, v in sorted(self.env.items())])
            self.vars_text.setText(vars_text)

    def clear_variables(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        if not self.env:
            return

        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     f"–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ({len(self.env)} —à—Ç.)?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.env.clear()
            self.update_variables_display()
            self.status_bar.showMessage("–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã", 3000)

    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        if self.history_list.count() == 0:
            return

        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     f"–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é ({self.history_list.count()} –∑–∞–ø–∏—Å–µ–π)?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.history_list.clear()
            self.history.clear()
            self.status_bar.showMessage("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞", 3000)

    def clear_input(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞"""
        self.input_field.clear()
        self.result_label.setText("= 0")
        self.last_result = None
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º")

    def clear_all(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ"""
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–∏—Å—Ç–æ—Ä–∏—é, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –≤–≤–æ–¥)?",
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.clear_input()
            self.history_list.clear()
            self.history.clear()
            self.env.clear()
            self.update_variables_display()
            self.status_bar.showMessage("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã", 3000)

    def copy_result(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if self.last_result is not None:
            QApplication.clipboard().setText(str(self.last_result))
            self.status_bar.showMessage("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", 3000)

    def toggle_history(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        if self.history_visible:
            # –°–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.history_group.hide()
            self.history_visible = False
            self.status_bar.showMessage("–ò—Å—Ç–æ—Ä–∏—è —Å–∫—Ä—ã—Ç–∞", 2000)
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã splitter'–∞
            sizes = self.splitter.sizes()
            self.splitter.setSizes([sizes[0] + sizes[1] // 2, sizes[1] // 2])
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.history_group.show()
            self.history_visible = True
            self.status_bar.showMessage("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∞", 2000)
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            total = sum(self.splitter.sizes())
            self.splitter.setSizes([total * 2 // 3, total // 3])

    def animate_result(self, success=True):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        glow = QGraphicsDropShadowEffect()
        glow.setBlurRadius(20)
        glow.setOffset(0, 0)

        if success:
            glow.setColor(QColor(76, 175, 80, 180))  # –ó–µ–ª–µ–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        else:
            glow.setColor(QColor(244, 67, 54, 180))  # –ö—Ä–∞—Å–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ

        self.result_label.setGraphicsEffect(glow)

        # –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        QTimer.singleShot(1000, lambda: self.result_label.setGraphicsEffect(None))

    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π"""
        style = """
        QMainWindow {
            background-color: #1a1a1a;
        }

        QGroupBox {
            font-size: 14px;
            font-weight: bold;
            color: #ffffff;
            border: 2px solid #444444;
            border-radius: 12px;
            margin-top: 15px;
            padding-top: 15px;
            background-color: #252525;
        }

        QGroupBox::title {
            subcontrol-origin: margin;
            subcontrol-position: top center;
            padding: 5px 20px;
            background-color: #333333;
            border-radius: 6px;
            letter-spacing: 1px;
        }

        QLineEdit {
            background-color: #2d2d2d;
            border: 2px solid #3a3a3a;
            border-radius: 8px;
            padding: 10px;
            color: #ffffff;
            font-size: 15px;
            selection-background-color: #4fc3f7;
        }

        QLineEdit:focus {
            border-color: #4fc3f7;
            background-color: #333333;
        }

        QLineEdit[readOnly="true"] {
            color: #4fc3f7;
            background-color: #2d2d2d;
            border: 2px solid #3a3a3a;
            border-radius: 8px;
            padding: 10px;
        }

        QPushButton {
            background-color: #3a3a3a;
            border: none;
            border-radius: 8px;
            color: white;
            padding: 10px;
            font-weight: bold;
            min-height: 25px;
        }

        QPushButton:hover {
            background-color: #4a4a4a;
        }

        QPushButton:pressed {
            background-color: #2a2a2a;
            padding: 11px 9px 9px 11px;
        }

        QPushButton[button_type="number"] {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #4a4a4a, stop: 1 #3a3a3a);
        }

        QPushButton[button_type="number"]:hover {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #5a5a5a, stop: 1 #4a4a4a);
        }

        QPushButton[button_type="operator"] {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #ff7b45, stop: 1 #ff5b25);
        }

        QPushButton[button_type="operator"]:hover {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #ff9b65, stop: 1 #ff7b45);
        }

        QPushButton[button_type="function"] {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #8c5dff, stop: 1 #6c3dff);
        }

        QPushButton[button_type="function"]:hover {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #ac7dff, stop: 1 #8c5dff);
        }

        QPushButton[button_type="equals"] {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #10d863, stop: 1 #00b843);
            font-size: 18px;
        }

        QPushButton[button_type="equals"]:hover {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #30f883, stop: 1 #10d863);
        }

        QPushButton[button_type="clear"] {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #ff4848, stop: 1 #ff2828);
        }

        QPushButton[button_type="clear"]:hover {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #ff6868, stop: 1 #ff4848);
        }

        QPushButton[button_type="constant"] {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #31a6f3, stop: 1 #1186d3);
        }

        QPushButton[button_type="constant"]:hover {
            background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                        stop: 0 #51c6f3, stop: 1 #31a6f3);
        }

        QListWidget {
            background-color: #2d2d2d;
            border: 2px solid #3a3a3a;
            border-radius: 8px;
            color: #e0e0e0;
            padding: 8px;
            outline: none;
        }

        QListWidget::item {
            padding: 8px;
            border-bottom: 1px solid #3a3a3a;
            border-radius: 4px;
            margin: 2px;
        }

        QListWidget::item:hover {
            background-color: #3a3a3a;
        }

        QListWidget::item:selected {
            background-color: #4fc3f7;
            color: #1a1a1a;
        }

        QTextEdit {
            background-color: #2d2d2d;
            border: 2px solid #3a3a3a;
            border-radius: 8px;
            color: #e0e0e0;
            padding: 8px;
            font-family: Consolas, monospace;
        }

        QSplitter::handle {
            background-color: #3a3a3a;
            width: 3px;
            border-radius: 1px;
        }

        QSplitter::handle:hover {
            background-color: #4fc3f7;
        }

        QStatusBar {
            background-color: #242424;
            color: #a0a0a0;
            border-top: 1px solid #3a3a3a;
            font-size: 12px;
        }

        QMenuBar {
            background-color: #242424;
            color: #e0e0e0;
            border-bottom: 1px solid #3a3a3a;
        }

        QMenuBar::item:selected {
            background-color: #3a3a3a;
        }

        QMenu {
            background-color: #2d2d2d;
            color: #e0e0e0;
            border: 1px solid #3a3a3a;
            border-radius: 4px;
        }

        QMenu::item:selected {
            background-color: #4fc3f7;
            color: #1a1a1a;
        }

        QMessageBox {
            background-color: #2d2d2d;
            color: #e0e0e0;
        }
        """
        self.setStyleSheet(style)


def run_gui():
    """–ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication.instance()
    if app is None:
        app = QApplication(sys.argv)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    app.setStyle("Fusion")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π –ø–∞–ª–∏—Ç—Ä—ã
    dark_palette = QPalette()
    dark_palette.setColor(QPalette.Window, QColor(26, 26, 26))
    dark_palette.setColor(QPalette.WindowText, Qt.white)
    dark_palette.setColor(QPalette.Base, QColor(45, 45, 45))
    dark_palette.setColor(QPalette.AlternateBase, QColor(60, 60, 60))
    dark_palette.setColor(QPalette.ToolTipBase, Qt.white)
    dark_palette.setColor(QPalette.ToolTipText, Qt.white)
    dark_palette.setColor(QPalette.Text, Qt.white)
    dark_palette.setColor(QPalette.Button, QColor(45, 45, 45))
    dark_palette.setColor(QPalette.ButtonText, Qt.white)
    dark_palette.setColor(QPalette.BrightText, Qt.red)
    dark_palette.setColor(QPalette.Link, QColor(42, 130, 218))
    dark_palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    dark_palette.setColor(QPalette.HighlightedText, Qt.black)
    app.setPalette(dark_palette)

    calculator = CalculatorGUI()
    calculator.show()

    sys.exit(app.exec())
